/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pathing_TYPES_H
#define pathing_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace pathing {

struct Result {
  enum type {
    UNKNOWN = 0,
    SUCCESS = 1,
    FINAZLIZED_FAILED = 2,
    UPDATE_FAILED = 3,
    SLICE_INIT_FAILED = 4,
    MESH_INIT_FAILED = 5,
    PARTIAL_ROUTE = 6,
    END_POLY_NOT_FOUND = 7,
    START_POLY_NOT_FOUND = 8,
    FIND_STRAIGHT_FAILED = 9,
    INVALID_CONTINENTS = 10
  };
};

extern const std::map<int, const char*> _Result_VALUES_TO_NAMES;

typedef struct _Position__isset {
  _Position__isset() : x(false), y(false), z(false), continent(false), isInAir(false) {}
  bool x;
  bool y;
  bool z;
  bool continent;
  bool isInAir;
} _Position__isset;

class Position {
 public:

  static const char* ascii_fingerprint; // = "1A536EA39EE0DFAA546D11ECAFD4A7C0";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x53,0x6E,0xA3,0x9E,0xE0,0xDF,0xAA,0x54,0x6D,0x11,0xEC,0xAF,0xD4,0xA7,0xC0};

  Position() : x(0), y(0), z(0), continent(0), isInAir(0) {
  }

  virtual ~Position() throw() {}

  double x;
  double y;
  double z;
  int32_t continent;
  bool isInAir;

  _Position__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_continent(const int32_t val) {
    continent = val;
  }

  void __set_isInAir(const bool val) {
    isInAir = val;
  }

  bool operator == (const Position & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(continent == rhs.continent))
      return false;
    if (!(isInAir == rhs.isInAir))
      return false;
    return true;
  }
  bool operator != (const Position &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Position & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlacklistedArea__isset {
  _BlacklistedArea__isset() : position(false), radius(false) {}
  bool position;
  bool radius;
} _BlacklistedArea__isset;

class BlacklistedArea {
 public:

  static const char* ascii_fingerprint; // = "10D4B7A6C54B353C4E9E6B5AF66010F1";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0xD4,0xB7,0xA6,0xC5,0x4B,0x35,0x3C,0x4E,0x9E,0x6B,0x5A,0xF6,0x60,0x10,0xF1};

  BlacklistedArea() : radius(0) {
  }

  virtual ~BlacklistedArea() throw() {}

  Position position;
  double radius;

  _BlacklistedArea__isset __isset;

  void __set_position(const Position& val) {
    position = val;
  }

  void __set_radius(const double val) {
    radius = val;
  }

  bool operator == (const BlacklistedArea & rhs) const
  {
    if (!(position == rhs.position))
      return false;
    if (!(radius == rhs.radius))
      return false;
    return true;
  }
  bool operator != (const BlacklistedArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlacklistedArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RouteParameters__isset {
  _RouteParameters__isset() : canFly(false), faction(false), randomVariance(false), blacklistedPositions(false) {}
  bool canFly;
  bool faction;
  bool randomVariance;
  bool blacklistedPositions;
} _RouteParameters__isset;

class RouteParameters {
 public:

  static const char* ascii_fingerprint; // = "4727F91E899CD59AA227EEF733865666";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x27,0xF9,0x1E,0x89,0x9C,0xD5,0x9A,0xA2,0x27,0xEE,0xF7,0x33,0x86,0x56,0x66};

  RouteParameters() : canFly(0), faction(0), randomVariance(0) {
  }

  virtual ~RouteParameters() throw() {}

  bool canFly;
  int32_t faction;
  int32_t randomVariance;
  std::vector<BlacklistedArea>  blacklistedPositions;

  _RouteParameters__isset __isset;

  void __set_canFly(const bool val) {
    canFly = val;
  }

  void __set_faction(const int32_t val) {
    faction = val;
  }

  void __set_randomVariance(const int32_t val) {
    randomVariance = val;
  }

  void __set_blacklistedPositions(const std::vector<BlacklistedArea> & val) {
    blacklistedPositions = val;
  }

  bool operator == (const RouteParameters & rhs) const
  {
    if (!(canFly == rhs.canFly))
      return false;
    if (!(faction == rhs.faction))
      return false;
    if (!(randomVariance == rhs.randomVariance))
      return false;
    if (!(blacklistedPositions == rhs.blacklistedPositions))
      return false;
    return true;
  }
  bool operator != (const RouteParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RouteParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Response__isset {
  _Response__isset() : code(false), route(false) {}
  bool code;
  bool route;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "03DCB62FBB3143113E62EF9800C773E8";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xDC,0xB6,0x2F,0xBB,0x31,0x43,0x11,0x3E,0x62,0xEF,0x98,0x00,0xC7,0x73,0xE8};

  Response() : code((Result::type)0) {
  }

  virtual ~Response() throw() {}

  Result::type code;
  std::vector<Position>  route;

  _Response__isset __isset;

  void __set_code(const Result::type val) {
    code = val;
  }

  void __set_route(const std::vector<Position> & val) {
    route = val;
  }

  bool operator == (const Response & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(route == rhs.route))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
