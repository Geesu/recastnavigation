/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pathing_types.h"

namespace pathing {

int _kResultValues[] = {
  Result::UNKNOWN,
  Result::SUCCESS,
  Result::FINAZLIZED_FAILED,
  Result::UPDATE_FAILED,
  Result::SLICE_INIT_FAILED,
  Result::MESH_INIT_FAILED,
  Result::PARTIAL_ROUTE,
  Result::END_POLY_NOT_FOUND,
  Result::START_POLY_NOT_FOUND,
  Result::FIND_STRAIGHT_FAILED,
  Result::INVALID_CONTINENTS
};
const char* _kResultNames[] = {
  "UNKNOWN",
  "SUCCESS",
  "FINAZLIZED_FAILED",
  "UPDATE_FAILED",
  "SLICE_INIT_FAILED",
  "MESH_INIT_FAILED",
  "PARTIAL_ROUTE",
  "END_POLY_NOT_FOUND",
  "START_POLY_NOT_FOUND",
  "FIND_STRAIGHT_FAILED",
  "INVALID_CONTINENTS"
};
const std::map<int, const char*> _Result_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kResultValues, _kResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Position::ascii_fingerprint = "1A536EA39EE0DFAA546D11ECAFD4A7C0";
const uint8_t Position::binary_fingerprint[16] = {0x1A,0x53,0x6E,0xA3,0x9E,0xE0,0xDF,0xAA,0x54,0x6D,0x11,0xEC,0xAF,0xD4,0xA7,0xC0};

uint32_t Position::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->continent);
          this->__isset.continent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isInAir);
          this->__isset.isInAir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Position::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Position");
  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("continent", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->continent);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isInAir", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isInAir);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlacklistedArea::ascii_fingerprint = "10D4B7A6C54B353C4E9E6B5AF66010F1";
const uint8_t BlacklistedArea::binary_fingerprint[16] = {0x10,0xD4,0xB7,0xA6,0xC5,0x4B,0x35,0x3C,0x4E,0x9E,0x6B,0x5A,0xF6,0x60,0x10,0xF1};

uint32_t BlacklistedArea::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radius);
          this->__isset.radius = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlacklistedArea::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlacklistedArea");
  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("radius", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->radius);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RouteParameters::ascii_fingerprint = "4727F91E899CD59AA227EEF733865666";
const uint8_t RouteParameters::binary_fingerprint[16] = {0x47,0x27,0xF9,0x1E,0x89,0x9C,0xD5,0x9A,0xA2,0x27,0xEE,0xF7,0x33,0x86,0x56,0x66};

uint32_t RouteParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canFly);
          this->__isset.canFly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faction);
          this->__isset.faction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->randomVariance);
          this->__isset.randomVariance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->blacklistedPositions.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->blacklistedPositions.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->blacklistedPositions[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.blacklistedPositions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RouteParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RouteParameters");
  xfer += oprot->writeFieldBegin("canFly", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->canFly);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("faction", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->faction);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("randomVariance", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->randomVariance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("blacklistedPositions", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->blacklistedPositions.size()));
    std::vector<BlacklistedArea> ::const_iterator _iter5;
    for (_iter5 = this->blacklistedPositions.begin(); _iter5 != this->blacklistedPositions.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Response::ascii_fingerprint = "03DCB62FBB3143113E62EF9800C773E8";
const uint8_t Response::binary_fingerprint[16] = {0x03,0xDC,0xB6,0x2F,0xBB,0x31,0x43,0x11,0x3E,0x62,0xEF,0x98,0x00,0xC7,0x73,0xE8};

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->code = (Result::type)ecast6;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->route.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            iprot->readListBegin(_etype10, _size7);
            this->route.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->route[_i11].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.route = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Response");
  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("route", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->route.size()));
    std::vector<Position> ::const_iterator _iter12;
    for (_iter12 = this->route.begin(); _iter12 != this->route.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
